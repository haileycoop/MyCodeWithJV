# Multiplayer approach

## Inputs from Luis

**Broader understanding of multiplayer systems**
I had an initial chat with Luis about how to go about this:

- To properly run multiplayer, I need a persistent service to manage game state
- Luis likened it to an app like Discord that is on my computer and always running and doing things, and therefore can persistently hold a state
- He distinguished this from services like netlify and cloud functions which are all about being stateless
- All of of these things open connections but stateless services try to close them again soon to save costs
- My app will need to be divided up between the client side and the server side
- The client side is the same for every user and can be static / stateless and so can be stored on a service like netlify
- The server, with an app like colyseus running on it, needs to be perisstent because it needs to be stateful
- I also have to write game logic code that lives on that server to manage game state
- The principle here is that you want the server to be authoritative in terms of what the game state is, so all the clients are being synced from one place
- There is no hard and fast rule about where the boundary is drawn
- In the example of a die: User A clicks on the die to roll it. This input is read in the client, but is sent to the server. The client could start the roll animation, but the server should generate the result, and send it back to client A, as well as clients B, C, and D.

**First multiplayer learning experiemnt**

- Colysesus seems good enough to try
- Initially just try running it locally and getting the code working from there
- When I want to deploy the app properly, there are more choices to make
- Luis is a fan of docker / kubernetes since we are moving environments around to different places now
- I could maybe install the colyseus on bluehost, or maybe on AWS since I have some credits

## Implementing Colyseus in phaser-test dev local

I asked the AI to tell me what to do. I pasted it's response but will also edit it to reflect what actually happened.

---

To start implementing Colyseus in your local development environment, follow these detailed steps:

### Step 1: Install System Requirements\*\*

- This was basics like npm, git, VScode...

### Step 2: Set Up Colyseus Server Project\*\*

1. Open your terminal or command prompt.
2. Navigate to the root folder of your project "phaser-test" using the `cd` command. For example: cd /path/to/phaser-test
3. Run the following command to create a new Colyseus server project:
   npm create colyseus-app@latest ./server

This command will create a new Colyseus server project in a directory named "server" within your "phaser-test" project folder. It will automatically install the necessary dependencies and set up the project structure for you.

Notes

- It set up a server folder with many sub-folders and files
- I noticed that the server has its own separate package.json and .env files
- This is similar to my previous firebase attempt, but I was trying to learn that all at once
- I think this must be the right approach because in talking to Luis, I'm pretty sure he said that the server folder is often tucked into the app's file structure
- So when developing locally, I will need to go into the server folder and start the server
- Do I need to implement vite separately for the server?

Results - how to run the local server

- when it's time to start the server:
- navigate to ./server in a new terminal
- run `npm start` and it will spin up locally

### Step 3: Connect to the Colyseus Server

To connect to the server from the client-side, you will need to use one of the available client-side SDKs provided by Colyseus. Follow the documentation of the specific SDK you choose to learn how to connect and interact with the server.

Notes

- I was able to do this by working with the AI to add colyseus code to main.ts
- I focused on resolving all of the IDE errors first
- then I focused on the warnings
- this led me to a place where I could get the app working and logging
- but it became clear that the app was not fully wired up and that I needed to start modifying the code
- this eventually led me to a place that I now realise is step 4

### Step 4: Implement Room Definition

In Colyseus, a Room is a game session that clients can join or create. You need to implement your own Room definition to handle your game sessions. This involves managing the game state, handling client connections and disconnections, and processing messages between the client and server.

Refer to the Colyseus documentation or tutorials to learn more about implementing Room definitions and handling game sessions.

Notes:

- After feeding the AI lots of documentation and the templates that were created when I installed colyseus, I was able to get it to make a list of changes that I would need to make to get my current game working as multiplayer
- I think some of these steps bleed into later steps of the current plan, so I will keep an eye on this as I go
- Here is the current list, which I will work through and update as needed

#### Wiring up multiplayer between client and server

To change the current behavior in main.ts into a multiplayer game using the server-side files, you need to perform the following steps:

##### Import the necessary server-side files and configure the server-side environment.

- I believe this is done but I will probably find out stuff as I go that still needs doing

##### Update the server-side MyRoom class to handle multiplayer game logic.

a. Implement game state management using @colyseus/schema to define the synchronized state of the room.

- Notes on how colyseus works

  - The @colyseus/schema library provides a way to define schema classes that represent the data structure of your game state. By using these schema classes, you ensure that the state is synchronized automatically between the server and connected clients.
  - When a client connects to the server, Colyseus automatically assigns a unique sessionId to that client. The sessionId is used to identify and manage the client within the room.

- Steps to take

  - Use `@colyseus/schema` which can be installed as an npm package
  - Import the schema and required types into the MyRoom.ts file on the server side
  - Define a class that extends Schema to represent my game state
  - In the onCreate method of the MyRoom class, initialize the game state using the MyRoomState schema
  - Access and modify the game state within the MyRoom class methods or event handlers

- Result: The default colyseus template files had already covered all of this, it turns out, and the AI was repeating work in a more convoluted way

b. Modify the onCreate method to initialize the game state and define message handlers for game events.

c. Update the onJoin and onLeave methods to handle player connections and disconnections.

d. Implement game-specific logic within the message handlers to update the game state based on player actions.

- Steps to take

  - I feel like I am doing b, c, and d together
  - Here's what the AI suggests as a first test

    i. Client Responsibilities:

    - The client should create and initialize the box at a predefined initial position.
    - When the box is moved by the client, the client should send a message to the server with the updated position.

    ii. Server Responsibilities:

    - The server should receive the position updates from clients and update the game state (box position) accordingly.
    - After receiving an updated position from a client, the server should broadcast the updated position to all connected clients.

    iii. Implementation Steps:

    - I left off here just trying to get the server to log out the position of the box as delivered by the client
    - after spending a lot of time changing server-side code, I narrowed down the issue to the handleCreate function in the client code
    - For some reason, 'this.room' wasn't evaluating to true even though it does elsewhere, so the function was failing
    - ChatGPT is not very helpful with context-based errors, so I asked Josh for help and I need to stop now
    - I ended up drilling down on the problem on my own, and the story of that can be found in "JS Context Problem in my notes"
    - The server now logs out the position of the box, but is not passing updates back to other clients
    - If I can get that working reasonably well, then it will be back to deployment land and getting colyseus working on the web

    - Modify the `MyRoomState` class to include a property for the box's position, such as `@type("object") boxPosition: { x: number, y: number }`.
    - In the `onCreate` method of `MyRoom`, initialize the game state by setting the initial position for the `boxPosition` property.
    - Add a message handler for the box movement event in the `onCreate` method. This handler should receive the updated box position from the client and update the `boxPosition` property in the game state.
    - When the `boxPosition` property is updated in the game state, broadcast the updated position to all connected clients using `this.broadcast("boxPositionUpdate", updatedPosition)`.

    By following this approach, the initial position of the box is set by the client, ensuring consistency across all clients. After that, the server manages the box's position, and updates are sent from the client to the server and then broadcasted to all clients for synchronization.

    - I didn't follow these steps exactly but it works now
    - boxPosition is synced across multiple clients on my local!

##### Modify the server-side app.config.ts file to import and define the MyRoom class.

- pretty sure this got down out of the box

##### Customize the MyRoomState schema in MyRoomState.ts to reflect the game's data structure and state.

- got done along the way

##### Update the client-side main.ts to connect to the Colyseus server, join or create a room, and handle room events.

a. Update the import statements to include the necessary Colyseus and Phaser libraries.

b. Modify the connection URL in the Client constructor to match the server's address.

c. Handle room events such as state changes, receiving messages from the server, errors, and client disconnections.

d. Pass the Colyseus room instance to the GameScene constructor and store it as a property.

- all got done along the way

##### Update the GameScene class in the client-side main.ts to integrate with the multiplayer functionality.

a. Store the Colyseus room instance as a property within the GameScene class.

b. Modify the create method to handle game initialization and setup.

c. Implement event handlers or listeners for player actions, such as dragging objects, and communicate these actions to the server through the Colyseus room instance.

d. Update the update method to reflect the synchronized game state received from the server.

- got done along the way

##### Customize the remaining Phaser game code and assets as needed for your specific multiplayer game.

Remember to adapt the code and steps to match your game's requirements and design.

### Step 5: Exchange Messages Between Client and Server

To enable real-time communication between the client and server, you need to exchange messages. This allows clients to send inputs or actions to the server and receive updates or events from the server. Colyseus provides mechanisms for sending and receiving messages between the client and server, and you can define your own message formats and protocols.

Consult the Colyseus documentation for details on how to exchange messages between the client and server.

### Step 6: Understand State Synchronization

Colyseus offers automatic state synchronization between the server and connected clients. This means that the server's game state is automatically synchronized with the clients, ensuring consistency across all connected players. You should familiarize yourself with how state synchronization works in Colyseus to ensure your multiplayer game operates as expected.

Refer to the Colyseus documentation or tutorials for a deeper understanding of state synchronization in Colyseus.

### Step 7: Experiment, Play, and Have Fun!

Now that you have set up your Colyseus server project and learned the basics, it's time to experiment, play, and have fun! Start developing your multiplayer game using Colyseus, test it locally, and iterate on your design and features. Don't be afraid to try new ideas and learn from the process.

- this is all very general
